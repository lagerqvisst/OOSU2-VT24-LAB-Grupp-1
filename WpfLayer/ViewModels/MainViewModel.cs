using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using EntityLayer;
using BusinessLayer;
using WpfLayer.Models;
using System.Windows.Input;
using System.Windows;
using PresentationLayer;
using WpfLayer.Views;

namespace WpfLayer.ViewModels
{
    public class MainViewModel: ObservableObject
    {
        //Controller class to return user object based on login credentials in the view
        private LoginController loginController = new LoginController();
        private DoctorController doctorController = new DoctorController();

        #region private properties
        private string _userName;
        private string _password;
        private string _funFact;
        #endregion

        #region Commands
        public ICommand SignInCommand { get; private set; }
        public ICommand ShutDownCommand { get; private set; }
        public ICommand AutoGenDocCredCmd { get; private set; }
        public ICommand AutoGenRecCredCmd { get; private set; }

        public ICommand FunFactCmd { get; private set; }
        #endregion

        public MainViewModel()
        {
            #region Commands initialization
            SignInCommand = new RelayCommand(SignIn, CanSignIn);
            ShutDownCommand = new RelayCommand(ShutDowApplication);
            AutoGenDocCredCmd = new RelayCommand(AutoGenerateDoctorCredentials);
            AutoGenRecCredCmd = new RelayCommand(AutoGenerateReceptionistCredentials);
            FunFactCmd = new RelayCommand(GenerateFunFact);
            #endregion

        }


        #region public propertes bound in XAML
        public string UserName
        {
            get { return _userName; }
            set
            {
                _userName = value;
                OnPropertyChanged();
            }
        }
        public string Password
        {
            get { return _password; }
            set
            {
                _password = value;
                OnPropertyChanged();
            }
        }

        public string FunFact
        {
            get { return _funFact; }
            set
            {
                _funFact = value;
                OnPropertyChanged();
            }
        }
        #endregion

        #region methods bound to commands

        private bool CanSignIn()
        {
            // Implementera logik för att avgöra om inloggning är möjlig
            return !string.IsNullOrEmpty(UserName) && !string.IsNullOrEmpty(Password);
        }

        private void SignIn()
        {
            // Implementera logik för inloggning
            IUser user = loginController.CheckUserLogin(UserName, Password) as IUser;

            if (user != null)
            {
                if (user is Receptionist)
                {
                    Receptionist receptionst = (Receptionist)user;
                    ReceptionistView receptionistView = new ReceptionistView(receptionst);
                    receptionistView.Show();
                }
                else if (user is Doctor)
                {
                    Doctor doctor = (Doctor)user;
                    DoctorView doctorView = new DoctorView(doctor);
                    doctorView.ShowDialog();
                }
            }
            else
            {
                MessageBox.Show("Fel användare eller lösenord");
            }
        }

        //Other Methods for navigation
        private void ShutDowApplication()
        {
            MessageBoxResult result = MessageBox.Show("Are you sure you want to exit the application?", "Shutdown", MessageBoxButton.YesNo, MessageBoxImage.Question);
            if (result == MessageBoxResult.Yes)
            {
                Environment.Exit(0);
            }
        }

        private void AutoGenerateDoctorCredentials()
        {

            Doctor doctor = loginController.GetRandomDoctor();

            if (doctor != null)
            {
                UserName = doctor.name;
                Password = doctor.password;
            }
            else
            {
                MessageBox.Show("No doctor found");
            }


        }

        private void AutoGenerateReceptionistCredentials()
        {
            Receptionist receptionist = loginController.GetRandomReceptionist();
            if (receptionist != null)
            {
                UserName = receptionist.name;
                Password = receptionist.password;
            }
            else
            {
                MessageBox.Show("No receptionist found");
            }

        }



        private async void GenerateFunFact()
        {

            // Använd await för att vänta på att uppgiften ska slutföras
            _funFact = await LoginController.GetTodaysFact();

            MessageBox.Show(FunFact);
        }

        #endregion


    }
}
